;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(xref--read-identifier-history gud-gdb-history shell-command-history org-link--history org-agenda-search-history org-tags-history set-variable-value-history swiper-history face-name-history counsel-describe-symbol-history org-read-date-history org-capture--prompt-history minibuffer-history empty-history evil-ex-history counsel-M-x-history file-name-history ivy-history))
(setq org-agenda-search-history '("docker" "ccls" "virtualbox" "virtual" "格式化" "learn"))
(setq org-tags-history '(#("dai" 0 3 (ivy-index 0)) #("idea" 0 4 (ivy-index 0)) #("emacs" 0 5 (ivy-index 0)) #("SICP" 0 4 (ivy-index 0)) #("SICP,@learn" 0 11 (ivy-index 0)) #("lear" 0 4 (ivy-index 0)) #("dail" 0 4 (ivy-index 0)) #("lee" 0 3 (ivy-index 0))))
(setq swiper-history '(#("haskell" 0 7 (ivy-index 0)) #("lsp" 0 3 (ivy-index 5)) #("lang" 0 4 (ivy-index 0)) "__THROW" "struc" "s" #("scale-tree" 0 10 (ivy-index 0)) #("auto-sa" 0 7 (ivy-index 0)) #("dash" 0 4 (ivy-index 8)) "define" "scheme" "racket"))
(setq face-name-history '(#("eshell-p" 0 8 (ivy-index 0)) #("eshell" 0 6 (ivy-index 11))))
(setq org-read-date-history '("+7    "))
(setq org-capture--prompt-history '(#("我错了，我可以同时学习 SICP CSAPP ...和其他" 0 29 (ivy-index 0))))
(setq minibuffer-history '("std::stoi, std::stol, std::stoll(zh_cppreference)" "atoi(zh_cppreference)" "stoi cpp" "fltk doc write a editor" "Writing an editor in less than 1000 lines of code, just for fun" "i3wm 选中区域截图" "i3wm 截图" "SICP 2.2.4" "SICP 2.42 八皇后谜题" "a"))
(setq evil-ex-history '(#("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("W" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("WQ" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 20486)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 17240)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("W" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("q" 0 1 (ex-index 1)) #("w" 0 1 (ex-index 1)) #("wq" 0 1 (ex-index 1) 1 2 (ex-index 2)) #("w" 0 1 (ex-index 1))))
(setq counsel-M-x-history '(#("haskell" 0 7 (ivy-index 1)) #("^haskell-mode" 0 13 (ivy-index 0)) #("^undo" 0 5 (ivy-index 1)) #("^undo-tree-undo" 0 15 (ivy-index 0)) #("^xref" 0 5 (ivy-index 0)) #("^org" 0 4 (ivy-index 0)) #("xref-" 0 5 (ivy-index 0)) #("^yas-" 0 5 (ivy-index 0)) #("^dired-f" 0 8 (ivy-index 0)) #("^" 0 1 (ivy-index 0)) #("^markdow" 0 8 (ivy-index 1)) #("^markdown" 0 9 (ivy-index 1)) #("^yas" 0 4 (ivy-index 0)) #("^yas-insert-snippet" 0 19 (ivy-index 0)) #("^org-todo" 0 9 (ivy-index 1)) #("org-tod" 0 7 (ivy-index 1)) #("^company-mode" 0 13 (ivy-index 0)) #("^company-c" 0 10 (ivy-index 0)) #("undo-" 0 5 (ivy-index 6)) #("^org-t" 0 6 (ivy-index 12)) #("^eshell" 0 7 (ivy-index 0)) #("^or" 0 3 (ivy-index 0)) #("^org-inden" 0 10 (ivy-index 2)) #("org image" 0 9 (ivy-index 0)) #("^telega-ro" 0 10 (ivy-index 0)) #("^telega" 0 7 (ivy-index 0)) #("^gdb" 0 4 (ivy-index 0)) #("^undo-tree" 0 10 (ivy-index 1)) #("elm" 0 3 (ivy-index 0)) #("add-file" 0 8 (ivy-index 1)) #("^scheme-send" 0 12 (ivy-index 5)) #("^eshe" 0 5 (ivy-index 0)) #("^counsel-fa" 0 11 (ivy-index 0)) #("^org-dead" 0 9 (ivy-index 0)) #("^org-to" 0 7 (ivy-index 0))))
(setq file-name-history '(#("/home/abcdlsj/Dropbox/workspace/Haskell/ch01/WC.hs" 0 50 (ivy-index 2)) #("/home/abcdlsj/.emacs.d/core/init-lsp.el" 0 39 (ivy-index 1)) #("/home/abcdlsj/.emacs.d/core/init-packages.el" 0 44 (ivy-index 0)) #("/home/abcdlsj/Dropbox/n/CSAPP/Representing-Manipulating-Information.org" 0 71 (ivy-index 1)) #("/home/abcdlsj/Dropbox/workspace/CPP/atoi.cpp" 0 44 (ivy-index 0)) #("/home/abcdlsj/Dropbox/n/" 0 24 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/CPP/test.cpp" 0 44 (ivy-index 0)) #("/home/abcdlsj/Dropbox/n/OJ.org" 0 30 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/elpa/yasnippet-snippets-20200122.1140/" 0 61 (ivy-index 3)) #("/home/abcdlsj/Dropbox/workspace/CPP/Tree/buildtree.cpp" 0 54 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/CPP/Tree" 0 40 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/CPP/" 0 36 (ivy-index 0)) #("/home/abcdlsj/Dropbox/n/STL.org" 0 31 (ivy-index 0)) #("/home/abcdlsj/.ICEauthority" 0 27 (ivy-index 0)) #("/home/abcdlsj/Dropbox/org/blog.org" 0 34 (ivy-index 0)) #("/home/abcdlsj/.bash_logout" 0 26 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/core/init-awesome.el" 0 43 (ivy-index 0)) #("/home/abcdlsj/GithubPro/wis/wis.c" 0 33 (ivy-index 1)) #("/home/abcdlsj/.config/i3/config" 0 31 (ivy-index 0)) #("/home/abcdlsj/Dropbox/n/SICP.org" 0 32 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/core/init-org.el" 0 39 (ivy-index 0)) #("/home/abcdlsj/readme.org" 0 24 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.33.scm" 0 52 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.31.scm" 0 52 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.21.scm" 0 52 (ivy-index 1)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/ch2.scm" 0 51 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.30.scm" 0 52 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.29.scm" 0 52 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.org" 0 49 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.24.scm" 0 52 (ivy-index 0)) #("/home/abcdlsj/Dropbox/org/journal.org" 0 37 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.23.scm" 0 52 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.22.scm" 0 52 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.20.scm" 0 52 (ivy-index 1)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.19.scm" 0 52 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/1/coins.rkt" 0 53 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/core/init-edit.el" 0 40 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/core/init-keybindings.el" 0 47 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/core/init-ui.el" 0 38 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/snippets/scheme-mode/sicp" 0 48 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.18.scm" 0 52 (ivy-index 0)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.17.scm" 0 52 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/core/init-lisp.el" 0 40 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/core/init-lang.el" 0 40 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/core/init-custom.el" 0 42 (ivy-index 0)) #("/home/abcdlsj/.emacs.d/init.el" 0 30 (ivy-index 1)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/ch2support.scm" 0 58 (ivy-index 1)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.scm" 0 49 (ivy-index 12)) #("/home/abcdlsj/Dropbox/workspace/lisp/SICP/2/2.2.1.scm" 0 53 (ivy-index 0)) #("/home/abcdlsj/Dropbox/n/CS-Notes.org" 0 36 (ivy-index 1))))
(setq ivy-history '(#("wc" 0 2 (ivy-index 0)) #("lsp" 0 3 (ivy-index 0)) #("runghc " 0 7 (ivy-index 0)) #("hs" 0 2 (ivy-index 0)) #("tes" 0 3 (ivy-index 1)) #("test." 0 5 (ivy-index 0)) #("oj" 0 2 (ivy-index 0)) #("ato" 0 3 (ivy-index 0)) #("blo" 0 3 (ivy-index 0)) #("stru" 0 4 (ivy-index 1)) #("STL.org" 0 7 (ivy-index 0)) #("^j" 0 2 (ivy-index 0)) #("no" 0 2 (ivy-index 0)) #("link" 0 4 (ivy-index 0)) #("read" 0 4 (ivy-index 0)) #("behavior" 0 8 (ivy-index 0)) #("blog" 0 4 (ivy-index 0)) #("^h" 0 2 (ivy-index 0)) #("h" 0 1 (ivy-index 0)) #("cs-no" 0 5 (ivy-index 0)) #("^t" 0 2 (ivy-index 0)) #("jo" 0 2 (ivy-index 0)) #("jou" 0 3 (ivy-index 0)) #("eshell-" 0 7 (ivy-index 0)) #("ui" 0 2 (ivy-index 1)) #("note" 0 4 (ivy-index 0)) #("^n" 0 2 (ivy-index 0)) #("org." 0 4 (ivy-index 6)) #("lisp.el" 0 7 (ivy-index 0)) #("2.31" 0 4 (ivy-index 0)) #("2.3" 0 3 (ivy-index 0)) #("2.29.scm" 0 8 (ivy-index 0)) #("drrac" 0 5 (ivy-index 0)) #("2." 0 2 (ivy-index 1)) #("2.or" 0 4 (ivy-index 0)) #("2.2" 0 3 (ivy-index 0)) #("edi" 0 3 (ivy-index 0)) #("2.21" 0 4 (ivy-index 0)) #("2.20" 0 4 (ivy-index 0)) #("2.1" 0 3 (ivy-index 0)) #("ch2" 0 3 (ivy-index 0)) #("2.19" 0 4 (ivy-index 0)) #("2.18.scm" 0 8 (ivy-index 0)) #("2.17." 0 5 (ivy-index 0)) #("init-lis" 0 8 (ivy-index 0)) #("init-lisp" 0 9 (ivy-index 0)) #("lis" 0 3 (ivy-index 1)) #("lisp" 0 4 (ivy-index 2)) #("2.18" 0 4 (ivy-index 0)) #("2.17.sc" 0 7 (ivy-index 0)) #("ioccc/" 0 6 (ivy-index 0)) #("cs" 0 2 (ivy-index 0)) #("do" 0 2 (ivy-index 0))))
(setq evil-jumps-history '((1 "/home/abcdlsj/Dropbox/workspace/Haskell/ch01/WC.hs") (1 "/home/abcdlsj/Dropbox/workspace/Haskell/ch01/WC.hs") (1 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (1 "/home/abcdlsj/Dropbox/workspace/Haskell/ch01/WC.hs") (1 "/home/abcdlsj/Dropbox/org/elfeed.org") (4129 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (4220 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (4124 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (4082 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (3604 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (3321 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (3243 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (3078 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (2603 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (1959 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (1654 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (1351 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (1075 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (715 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (377 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (95 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (1 "/home/abcdlsj/.emacs.d/core/init-lsp.el") (1824 "/home/abcdlsj/.emacs.d/core/init-packages.el") (1 "/home/abcdlsj/.emacs.d/core/init-packages.el") (3800 "/home/abcdlsj/Dropbox/n/OJ.org") (4373 "/home/abcdlsj/Dropbox/n/OJ.org") (358 "/home/abcdlsj/Dropbox/workspace/CPP/test.cpp") (211 "/home/abcdlsj/Dropbox/workspace/CPP/test.cpp") (210 "/home/abcdlsj/Dropbox/workspace/CPP/test.cpp") (210 "/home/abcdlsj/Dropbox/workspace/CPP/test.cpp") (210 "/home/abcdlsj/Dropbox/workspace/CPP/test.cpp") (530 "/home/abcdlsj/Dropbox/workspace/CPP/atoi.cpp") (385 "/home/abcdlsj/Dropbox/n/CSAPP/Representing-Manipulating-Information.org") (820 "/home/abcdlsj/Dropbox/n/CSAPP/Representing-Manipulating-Information.org") (979 "/home/abcdlsj/Dropbox/n/CSAPP/Representing-Manipulating-Information.org") (3466 "/usr/include/stdlib.h") (3078 "/usr/include/stdlib.h") (3215 "/usr/include/stdlib.h") (498 "/home/abcdlsj/Dropbox/workspace/CPP/atoi.cpp") (1639 "/home/abcdlsj/Dropbox/n/OJ.org") (284 "/home/abcdlsj/Dropbox/workspace/CPP/test.cpp") (2649 "/home/abcdlsj/Dropbox/n/OJ.org") (1751 "/home/abcdlsj/Dropbox/n/OJ.org") (2763 "/home/abcdlsj/Dropbox/n/OJ.org") (1574 "/home/abcdlsj/Dropbox/n/OJ.org") (1602 "/home/abcdlsj/Dropbox/n/OJ.org") (8129 "/home/abcdlsj/Dropbox/org/blog.org") (4886 "/home/abcdlsj/Dropbox/org/task.org") (6114 "/home/abcdlsj/Dropbox/n/CSAPP/Representing-Manipulating-Information.org") (347 "/home/abcdlsj/Dropbox/n/CSAPP/Representing-Manipulating-Information.org") (1 "/home/abcdlsj/Dropbox/workspace/CPP/test.cpp") (1 "/home/abcdlsj/GithubPro/wis/readme.md") (131 "/home/abcdlsj/Dropbox/workspace/C/hello_ncurses.c") (1 "/home/abcdlsj/Dropbox/workspace/C/hello_ncurses.c") (20655 "/home/abcdlsj/Dropbox/org/blog.org") (20731 "/home/abcdlsj/Dropbox/org/blog.org") (20627 "/home/abcdlsj/Dropbox/org/blog.org") (7 "/home/abcdlsj/Dropbox/org/task.org") (4629 "/home/abcdlsj/Dropbox/org/task.org") (4430 "/home/abcdlsj/Dropbox/org/task.org")))
(setq mark-ring 'nil)
(setq search-ring 'nil)
(setq regexp-search-ring '("haskell" "lsp" "lang" #("scale-tree" 0 10 (isearch-case-fold-search nil)) "auto-sa" "dash" #("length" 0 6 (isearch-case-fold-search t))))
(setq extended-command-history 'nil)
